"use strict";(self.webpackChunkrm_controls_docs=self.webpackChunkrm_controls_docs||[]).push([[71],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=o,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4978:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={},c="rm-controls Code Style Guidelines",s={unversionedId:"dev_guide/code_style",id:"dev_guide/code_style",isDocsHomePage:!1,title:"rm-controls Code Style Guidelines",description:"We use the ROS C++ Style guide for all C++ development and the ROS Python Style guide for Python, you can use rosbestpracitces as a template.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/dev_guide/code_style.md",sourceDirName:"dev_guide",slug:"/dev_guide/code_style",permalink:"/en/dev_guide/code_style",editUrl:"https://github.com/rm-controls/rm-controls.github.io/tree/master/current_docs/dev_guide/code_style.md",tags:[],version:"current",lastUpdatedAt:1630145559,formattedLastUpdatedAt:"8/28/2021",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CLion IDE \u914d\u7f6e",permalink:"/en/dev_guide/clion_ide_config"},next:{title:"rm_calibration_controllers",permalink:"/en/digging_deeper/controllers/rm_calibration_controllers"}},p=[{value:"C++",id:"c",children:[]},{value:"Inline Documentation",id:"inline-documentation",children:[]},{value:"Deprecation",id:"deprecation",children:[]},{value:"Exceptions",id:"exceptions",children:[]},{value:"Logging",id:"logging",children:[]},{value:"pre-commit Formatting Checks",id:"pre-commit-formatting-checks",children:[]},{value:"clang-format Auto Code Formatting",id:"clang-format-auto-code-formatting",children:[{value:"Command Line",id:"command-line",children:[]},{value:"Exceptions to clang-format",id:"exceptions-to-clang-format",children:[]}]},{value:"clang-tidy Linting",id:"clang-tidy-linting",children:[{value:"Exceptions to clang-tidy",id:"exceptions-to-clang-tidy",children:[]}]},{value:"Credits",id:"credits",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rm-controls-code-style-guidelines"},"rm-controls Code Style Guidelines"),(0,i.kt)("p",null,"We use the ",(0,i.kt)("a",{parentName:"p",href:"http://wiki.ros.org/CppStyleGuide"},"ROS C++ Style guide")," for all C++ development and the ",(0,i.kt)("a",{parentName:"p",href:"http://wiki.ros.org/PyStyleGuide"},"ROS Python Style guide")," for Python, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/leggedrobotics/ros_best_practices"},"ros_best_pracitces")," as a template."),(0,i.kt)("p",null,"To ease your development, we recommend the automated code formatter ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-format")," with a ROS configuration - to use see below."),(0,i.kt)("p",null,"In addition rm-controls has some extra style preferences:"),(0,i.kt)("h2",{id:"c"},"C++"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use C++14"),(0,i.kt)("li",{parentName:"ul"},"Use the C++ standard library (",(0,i.kt)("inlineCode",{parentName:"li"},"std::"),") whenever possible"),(0,i.kt)("li",{parentName:"ul"},"Avoid C-style functions such as ",(0,i.kt)("inlineCode",{parentName:"li"},"FLT_EPSILON")," - instead use ",(0,i.kt)("inlineCode",{parentName:"li"},"std::numeric_limits<double>::epsilon()")),(0,i.kt)("li",{parentName:"ul"},"Boost is an encouraged library when functionality is not available in the standard library"),(0,i.kt)("li",{parentName:"ul"},'Use "pragma once" in headers instead of include guards.')),(0,i.kt)("h2",{id:"inline-documentation"},"Inline Documentation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use Doxygen-style comments"),(0,i.kt)("li",{parentName:"ul"},"To document future work, use the format ",(0,i.kt)("inlineCode",{parentName:"li"},"TODO(username): description")),(0,i.kt)("li",{parentName:"ul"},"Add extensive comments to explain complex sections of code"),(0,i.kt)("li",{parentName:"ul"},"Prefer full, descriptive variable names over short acryonms - e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"robot_state_")," over ",(0,i.kt)("inlineCode",{parentName:"li"},"rs_")),(0,i.kt)("li",{parentName:"ul"},"Avoid ",(0,i.kt)("inlineCode",{parentName:"li"},"auto"),", if the variable type doesn\u2019t become clear immediately from the context (e.g. from ",(0,i.kt)("inlineCode",{parentName:"li"},"make_shared<...>"),")")),(0,i.kt)("h2",{id:"deprecation"},"Deprecation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deprecate functions using C++14 ",(0,i.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/language/attributes/deprecated"}," ",(0,i.kt)("inlineCode",{parentName:"a"},"[[deprecated]]")," ")," attribute"),(0,i.kt)("li",{parentName:"ul"},"Add a useful message describing how to handle the situation:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'[[deprecated("use bar instead")]] void foo() {}\n')),(0,i.kt)("p",null,"Which will result in:"),(0,i.kt)("p",null,"   warning: 'foo' is deprecated: use bar instead ","[-Wdeprecated-declarations]"," foo(); ^ note: 'foo' has been explicitly marked deprecated here void foo() {} ^"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add an associated TODO describing when to remove the feature (date and/or ROS version)")),(0,i.kt)("h2",{id:"exceptions"},"Exceptions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Catch known exceptions and log them in detail. Avoid using ",(0,i.kt)("inlineCode",{parentName:"li"},"catch (...)")," as it hides information about a possible fault. We want to know if something goes wrong."),(0,i.kt)("li",{parentName:"ul"},"We don't catch exceptions that don't derive from ",(0,i.kt)("inlineCode",{parentName:"li"},"std::exception")," in rm-controls. It is the responsibility of the plugin provider to handle non-",(0,i.kt)("inlineCode",{parentName:"li"},"std::exception"),"-derived exceptions locally.")),(0,i.kt)("h2",{id:"logging"},"Logging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ROS logging functionality is utilized and namespaced. i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},'ROS_INFO_NAMED(LOGNAME, "Starting listener...'),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This makes it easier to understand where output is coming from on the command line and allows for more fine-grained filtering of terminal output noise."),(0,i.kt)("li",{parentName:"ul"},"Your logging namespace is defined as a ",(0,i.kt)("inlineCode",{parentName:"li"},"const")," variable. (eg: ",(0,i.kt)("inlineCode",{parentName:"li"},'constexpr char LOGNAME[] = "robot_state";'),")"),(0,i.kt)("li",{parentName:"ul"},"The use of the file name as the NAMED namespace is best practice, i.e. rm_hw.cpp would use ",(0,i.kt)("inlineCode",{parentName:"li"},'"rm_hw"')),(0,i.kt)("li",{parentName:"ul"},"Avoid using the package name as the namespace as this is already output by the logger")))),(0,i.kt)("h2",{id:"pre-commit-formatting-checks"},"pre-commit Formatting Checks"),(0,i.kt)("p",null,"In many of our repos we have a ",(0,i.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit")," check that runs in CI.\nYou can use this locally and set it up to run automatically before you commit something.\nTo install, use pip:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pip3 install pre-commit\n")),(0,i.kt)("p",null,"To run over all the files in the repo manually:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pre-commit run -a\n")),(0,i.kt)("p",null,"To run pre-commit automatically before committing in a local repo, install git hooks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pre-commit install\n")),(0,i.kt)("h2",{id:"clang-format-auto-code-formatting"},"clang-format Auto Code Formatting"),(0,i.kt)("p",null,"Note that if you use pre-commit as described above, clang-format is applied automatically before each commit (if ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-format-10")," is installed). This section describes how to use it manually."),(0,i.kt)("p",null,"You can run ",(0,i.kt)("strong",{parentName:"p"},"clang-format")," in several ways. To install on Ubuntu simply run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo apt install clang-format-10\n")),(0,i.kt)("p",null,"Please note that we rely on clang-format version ",(0,i.kt)("strong",{parentName:"p"},"10"),". Sadly, newer versions are not fully backward compatible."),(0,i.kt)("p",null,"clang-format requires a configuration file in the root of your catkin workspace. All rm-controls repo provides same file on repo root file.\n."),(0,i.kt)("h3",{id:"command-line"},"Command Line"),(0,i.kt)("p",null,"Format a single file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clang-format-10 -i -style=file MY_FLIE_NAME.cpp\n")),(0,i.kt)("p",null,"Format an entire directory recursively including subfolders:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"find . -name '*.h' -or -name '*.hpp' -or -name '*.cpp' | xargs clang-format-10 -i -style=file $1\n")),(0,i.kt)("h3",{id:"exceptions-to-clang-format"},"Exceptions to clang-format"),(0,i.kt)("p",null,"Occasionally the auto formatting used by clang-format might not make sense e.g. for lists of items that are easier to read on separate lines. It can be overwritten with the commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// clang-format off\n... some untouched code\n// clang-format on\n")),(0,i.kt)("p",null,"Use this sparingly though."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("blockquote",{parentName:"div"},(0,i.kt)("p",{parentName:"blockquote"},"The command Line tools are troublesome? Try ","[CLion IDE Configuration]",".")))),(0,i.kt)("h2",{id:"clang-tidy-linting"},"clang-tidy Linting"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"clang-tidy")," is a linting tool for C++. Where ",(0,i.kt)("strong",{parentName:"p"},"clang-format")," will fix the formatting of your code\n(wrong indentation, line length, etc), ",(0,i.kt)("strong",{parentName:"p"},"clang-tidy")," will fix programming errors to make your code\nmore modern, more readable, and less prone to common bugs."),(0,i.kt)("p",null,"You can install clang-tidy and other clang related tools with\n",(0,i.kt)("inlineCode",{parentName:"p"},"sudo apt install clang-tidy clang-tools")),(0,i.kt)("p",null,"Similarly to clang-format, clang-tidy uses the configuration file ",(0,i.kt)("inlineCode",{parentName:"p"},".clang-tidy")," that is found first when traversing the source folder hierarchy upwards. All rm-controls repo provides this file on repo root file."),(0,i.kt)("p",null,"Unlike clang-format, clang-tidy needs to know the exact compiler options used to build your project.\nTo provide them, configure cmake with ",(0,i.kt)("inlineCode",{parentName:"p"},"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON")," and cmake will create in the package's build\nfolder a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"compile_commands.json"),". ",(0,i.kt)("em",{parentName:"p"},"After")," building, you can run clang-tidy to analyze your code and even\n",(0,i.kt)("strong",{parentName:"p"},"fix")," issues automatically as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'for file in $(find $CATKIN_WS/build -name compile_commands.json) ; do\n    run-clang-tidy -fix -header-filter="$CATKIN_WS/.*" -p $(dirname $file)\ndone\n')),(0,i.kt)("p",null,"You can run it also on selected folders or files of a package by specifying regular expressions to match the file names:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'run-clang-tidy -fix -header-filter="$CATKIN_WS/.*" -p $CATKIN_WS/build/moveit_core collision\n')),(0,i.kt)("p",null,"Note that if you have multiple layers of nested ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops that need to be converted, clang-tidy\nwill only fix one at a time. So be sure to run the above command a few times to convert all code."),(0,i.kt)("p",null,"If you are only interested in the warnings, clang-tidy can also run directly during your build.\nYou can make a specific clang-tidy build with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"catkin config --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_CLANG_TIDY=clang-tidy\ncatkin build\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The command Line tools are troublesome? The CLion IDE has ",(0,i.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/clion/clang-tidy-checks-support.html"},"Clang-Tidy integration"),"."))),(0,i.kt)("h3",{id:"exceptions-to-clang-tidy"},"Exceptions to clang-tidy"),(0,i.kt)("p",null,"It is possible to suppress undesired clang-tidy checks by using ",(0,i.kt)("strong",{parentName:"p"},"NOLINT")," or ",(0,i.kt)("strong",{parentName:"p"},"NOLINTNEXTLINE")," comments. Please specify the check names explicitly in parentheses following the comments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const IKCallbackFn solution_callback = 0; // NOLINT(modernize-use-nullptr)\n\n// NOLINTNEXTLINE(performance-unnecessary-copy-initialization)\nrobot_state::RobotState robot_state(default_state);\n")),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"modernize-loop-convert")," check may convert ",(0,i.kt)("inlineCode",{parentName:"p"},"for (...; ...; ...)")," loops to ",(0,i.kt)("inlineCode",{parentName:"p"},"for (auto & ... : ...)"),".\nHowever, ",(0,i.kt)("inlineCode",{parentName:"p"},"auto")," is not an expression highly readable.\nPlease explicitly specify the variable type, if it doesn't become clear immediately from the context:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"for (const int & item : container)\n  std::cout << item;\n")),(0,i.kt)("h2",{id:"credits"},"Credits"),(0,i.kt)("p",null,"This file is modified by ",(0,i.kt)("a",{parentName:"p",href:"https://moveit.ros.org/documentation/contributing/code/"},"MoveIt Code Style Guidelines"),"."))}m.isMDXComponent=!0}}]);